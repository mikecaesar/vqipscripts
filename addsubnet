#!/usr/bin/python
#############################################################
# Script to add a subnet to VitalQIP
#
# Version 0.1 - 12th July 2017 - Mike Caesar
# Version 0.2 - 14th July 2017 - Mike Caesar
#               Added -d option
# Version 0.3 - 26th July 2017 - Mike Caesar
#               Added Logging and -v option
# Version 0.4 - 15th Aug 2017 - Mike Caesar
#               Updated logging to include username
#############################################################
import json
import requests
import apiutils
import sys
import getopt
import logging
import getpass
from config import *

# Usage function - called when there is an issue with the options
def usage():
    print("Usage:   addSubnet -s <subnet> -m <netmask> -n <network> [-d <domain>] [-v]")
    print("Example: addSubnet -s 10.10.0.0 -m 255.255.0.0 -n 10.0.0.0 -d example.domain.com")

# Read Options and arguments
try:
    opts, args = getopt.getopt(sys.argv[1:], "s:m:n:d:v")
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)

# Set all options
verbose=0
for opt, arg in opts:
    if opt == "-s":
        subnet=arg
    elif opt == "-n":
        network=arg
    elif opt == "-m":
        netmask=arg
    elif opt == "-d":
        domain=arg
    elif opt == "-v":
        verbose=1
    else:
        print("Unknown option : %s", opt)
        usage()
        sys.exit(2)

# Configure logging 
nameofuser=getpass.getuser()
extra = {'username':nameofuser}
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/var/log/vqipscripts.log')
formatter = logging.Formatter('%(levelname)s:%(asctime)s:%(filename)s:%(username)s - %(message)s')
handler.setFormatter(formatter)
if verbose:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.WARNING)
logger.addHandler(handler)
logger = logging.LoggerAdapter(logger, extra)


# Make sure that required options are set
try:
    subnet
    network
    netmask
except:
    print("Missing argument")
    usage()
    sys.exit(2)

# Get a session token
token = apiutils.get_token()

# Add a subnet. Domain comes from the config file.
url = apiurl + '/v4subnet/'
headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authentication': 'Token %s' %token}
data = '{"subnetAddress": "' + subnet + '","subnetMask": "' + netmask + '","networkAddress": "' + network + '","warningPercent": "90","warningType": "2","domains": {"name": ["' + domain + '"]}}'

logger.info('URL : %s' %(url))
logger.info('Headers : %s' %(headers))
logger.info('Data : %s' %(data))
r = requests.post(url, headers=headers, verify=False, data=data)
apiutils.chkstatus(r.status_code,r.content)
