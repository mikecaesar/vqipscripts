#!/usr/bin/python
######################################################################
#
# Script to update VitalQIP based on .csv file in the format...
# hostname,ipaddress,netmask
#
# Version 0.1, Mike Caesar, July 2017
# Version 0.2, Mike Caesar, July 2017
#              Added ignore_subnets option
#              Allow for hostname in the csv to be fully qualified
# Version 0.3 - 26th July 2017 - Mike Caesar
#               Added Logging and -v option
# Version 0.4 - 15th Aug 2017 - Mike Caesar
#               Updated logging to include username
#
#######################################################################
import sys
import os
import ipaddr
import requests
import csv
import getopt
import apiutils
import logging
import getpass
from config import *

# Usage Function - called when there is an issue with the options
def usage():
    print("Usage:   registerIpFile -f <filename> [-d <domain>] [-v]")
    print("Example: registerIpFile -f filename.csv -d example.domain.com")

# Read Options and arguments
try:
    opts, args = getopt.getopt(sys.argv[1:], "f:d:v")
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)

# Set all options
verbose=0
for opt, arg in opts:
    if opt == "-f":
        filename=arg
    elif opt == "-d":
        domain=arg
    elif opt == "-v":
        verbose=1
    else:
        print("Unknown option : %s", opt)
        usage()
        sys.exit(2)

# Configure logging
nameofuser=getpass.getuser()
extra = {'username':nameofuser}
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/var/log/vqipscripts.log')
formatter = logging.Formatter('%(levelname)s:%(asctime)s:%(filename)s:%(username)s - %(message)s')
handler.setFormatter(formatter)
if verbose:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.WARNING)
logger.addHandler(handler)
logger = logging.LoggerAdapter(logger, extra)

# Make sure that required options are set
try:
    filename
except:
    print("Missing argument")
    usage()
    sys.exit(2)

# Get a session token - 300 seconds expiration to allow time for processing csv file
token = apiutils.get_token(300)

with open(filename, 'rb') as csvfile:
    csvreader = csv.reader(csvfile)
    for row in csvreader:
        # Set hostname as everything before the first . in fqdn
        fqdn = row[0]
        fqdn = fqdn.split('.', 1)
        hostname = fqdn[0]
        ipaddress = row[1]
        netmask = row[2]
        ip_mask = ipaddress + "/" + netmask
        ip_obj = ipaddr.IPv4Network(ip_mask)
        subnet = str(ip_obj.network)
        # If the subnet is in the list to ignore, continue with the next row
        if subnet in ignore_subnets:
            continue
        # Set the domain to use for this row. If the hostname in this row of the csv
        # was fully qualified use that. Otherwise use the domain specified in the 
        # config file, or on the command line
        if len(fqdn)>1:
            row_domain=fqdn[1]
        else:
            row_domain=domain

        # Add the IPaddr and hostname to the subnet. 
	print('Registering - Hostname = %s IP = %s netmask = %s Domain = %s' %(hostname,ipaddress,netmask,row_domain))
	logger.info('Registering - Hostname = %s IP = %s netmask = %s Domain = %s' %(hostname,ipaddress,netmask,row_domain))
        url = apiurl + '/v4address/'
        headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authentication': 'Token %s' %token}
        data = '{"domainName": "' + row_domain + '","objectAddr": "' + ipaddress + '","objectClass": "Server","objectName": "' + hostname + '","subnetAddr": "' + subnet + '"}'

        logger.info('URL : %s' %(url))
        logger.info('Headers : %s' %(headers))
        logger.info('Data : %s' %(data))
        r = requests.post(url, headers=headers, verify=False, data=data)
        apiutils.chkstatus(r.status_code,r.content,fail='no')
