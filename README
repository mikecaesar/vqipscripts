=====================================
Scripts to interact with VitalQIP API
=====================================

Version 0.1, Mike Caesar, DXC Technology, July 2017
Version 0.2, Mike Caesar, DXC Technology, July 2017
Version 0.3, Mike Caesar, DXC Technology, July 2017
             Added logging and -v option.
Version 0.4, Mike Caesar, DXC Technology, Aug 2017

These scripts were developed and tested on RHEL 7.3 with Python 2.7.5

=====================================
Pre-Requisites
=====================================

These python scripts import the following modules...

  import getopt
  import getpass
  import json
  import os
  import requests
  import sys
  import logging
  import csv
  import ipaddr

You will need to ensure that these modules are installed on the machine
that is used to run the scripts. Missing modules can generally be installed
from the yum repositories as in the following example.

# yum -y install python-requests python-ipaddr


=====================================
Configuration
=====================================

Before running any scripts edit the config.py file and specify the following...

esmhost = 'vqiphostname'            # The hostname or IP of the ESM for VitalQIP. This needs to resolve 
esmport = '8080'                    # Port used to communicate with VitalQIP ESM. Default is 8080
org = 'VitalQIP%20Organization'     # The Organization within VitalQIP. Spaces represented as %20
domain = 'example.dxc.com'          # The domain that hostnames will be registered against.
adminpass = 'qipman'                # Password for the qipman admin user for VitalQIP.
ignore_subnets = ''                 # Comma separated list of subnets to ignore. Used by registerIpFile
                                    # This line needs to exist, even if the list is empty
                                    #  - further details below


Note: The organization is displayed in the top menu bar of the VitalQIP GUI.
      Default organization is "VitalQIP Organization"

Note: The password line can be omitted, in which case the scripts will prompt for the password
      when they are run. If the scripts need to be run automatically then the password needs to
      be specified. Ensure that the config.py file is not world readable.

Note: The domain specified in the config file is the default domain that will be used if a domain
      is not specified in the command line. To override this use the -d <domain> option.

=====================================
Logging
=====================================

The scripts log to a file /var/log/vqipscripts.log

Default logging level is to log anything from WARNING and above. Each command has a -v option that
will log anything from DEBUG and above.

=====================================
Running the Scripts
=====================================

Running any of the scripts without arguments displays usage and example.

addsubnet 

            Adds a new subnet into the address management. The parent network needs to already
            exist. There is currently no script for adding the parent network, it needs to 
            be done via the VitalQIP GUI.

            Usage:   addSubnet -s <subnet> -m <netmask> -n <network> [-d <domain>] [-v]
            Example: addSubnet -s 10.10.0.0 -m 255.255.0.0 -n 10.0.0.0 -d example.domain.com

            The above example adds a new subnet 10.10.0.0/16 to the pre-existing network 10.0.0.0

            If the domain is not specified then the default domain from the config file will be used.
            The domain specified here will be the only valid domain for this subnet. If IP addresses
            on this subnet need to belong to several different domains, then the additional domains
            need to be added via the GUI.

registerIP 

            Registers an IP address and hostname into the address management. The hostname will be 
            registered against the domain specified in the config.py file, unless the -d option is
            included.

            This script should be used when a specific IP Address is required.

            Usage:   registerIp -i <ipaddr> -s <subnet> -h <hostname> [-d <domain>] [-v]
            Example: registerIp -i 20.156.40.10 -s 20.156.0.0 -h server1 -d example.domain.com

registerNextFreeIp

            Registers the hostname against the next available IP address on the specified subnet. The
            hostname will be registered against the domain specified in the config.py file, unless
            the -d option is included.

            Usage:   registerNextFreeIp -s <subnet> -h <hostname> [-d <domain>] [-v]
            Example: registerNextFreeIp -s 20.156.0.0 -h server1 -d example.domain.com

            The IP address used will be reported in the output to screen as show in the example below.

            $ ./registerNextFreeIp -s 10.10.0.0 -h webserver1
            Selecting a free IP address
            Success
            Registering webserver1 using next free IP in the subnet: 10.10.0.9
            Success

deleteIp

            Delete an IP address from the address management.

            Usage:   deleteIp -i <ipaddr> [-v]
            Example: deleteIp -i 20.156.40.10

registerIpFile

            Register IP addresses based on the contents of a CSV file.

            Usage:   registerIpFile -f <filename> [-d <domain>] [-v]
            Example: registerIpFile -f filename.csv -d example.domain.com

            The file should be in the format:

            hostname,ipaddress,netmask

            e.g.

            serverabc1.example.domain.com,10.40.0.5,255.255.0.0
            serverabc2,10.40.0.7,255.255.0.0
            serverabc3,10.40.0.8,255.255.0.0
            serverabc4,10.40.0.15,255.255.0.0
            serverabc5,10.40.0.195,255.255.0.0


            The hostname can be fully qualified. If it is not fully qualified then the domain used will be
            the default domain from the config file, unless the -d option is specified.  

            If the csv is likely to contain entries that need to be ignored then these can be specified by
            including the subnets to ignore in the config.py file. This might be used for example if some
            hosts have dual NICs and only one of the NICs needs to be registered. 

            For example, if hosts have a backup NIC on 192.168.20.0/24 and we don't want to register these
            in VitalQIP, then we could add the following line in the config.py file...

            ignore_subnets = '192.168.20.0'

            Multiple subnets can be specified as follows...

            ignore_subnets = '192.168.20.0,192.168.30.0'
 
=====================================
Return Codes
=====================================

A return code of 1 indicates some failure reported back from the VitalQIP API. The reported
error message is displayed on screen.

A return code of 2 indicates some error with the arguments and options passed to the script
for example a missing argument or invalid option.
