#!/usr/bin/python
#############################################################
# Script to register the next free IP address in a subnet in VitalQIP
#
# Version 0.1 - 12th July 2017 - Mike Caesar
# Version 0.2 - 14th July 2017 - Mike Caesar
#               Added -d option
# Version 0.3 - 26th July 2017 - Mike Caesar
#               Added Logging and -v option
# Version 0.4 - 15th Aug 2017 - Mike Caesar
#               Updated logging to include username
#############################################################
import json
import requests
import apiutils
import sys
import getopt
import logging
import getpass
from config import *

# Usage Function - called when there is an issue with the options
def usage():
    print("Usage:   registerNextFreeIp -s <subnet> -h <hostname> [-d <domain>] [-v]")
    print("Example: registerNextFreeIp -s 20.156.0.0 -h server1 -d example.domain.com")

# Read Options and arguments
try:
    opts, args = getopt.getopt(sys.argv[1:], "s:h:d:v")
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)

# Set all options
verbose=0
for opt, arg in opts:
    if opt == "-s":
        subnet=arg
    elif opt == "-h":
        hostname=arg
    elif opt == "-d":
        domain=arg
    elif opt == "-v":
        verbose=1
    else:
        print("Unknown option : %s", opt)
        usage()
        sys.exit(2)

# Configure logging
nameofuser=getpass.getuser()
extra = {'username':nameofuser}
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/var/log/vqipscripts.log')
formatter = logging.Formatter('%(levelname)s:%(asctime)s:%(filename)s:%(username)s - %(message)s')
handler.setFormatter(formatter)
if verbose:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.WARNING)
logger.addHandler(handler)
logger = logging.LoggerAdapter(logger, extra)

# Make sure that required options are set
try:
    subnet
    hostname
except:
    print("Missing argument")
    usage()
    sys.exit(2)


# Get a session token
token = apiutils.get_token()

# Select the next free IP in the subnet
print('Selecting a free IP address')
logger.info('Selecting a free IP address')
url = apiurl + '/selectedv4address/' + subnet + '/'
headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authentication': 'Token %s' %token}

logger.info('URL : %s' %(url))
logger.info('Headers : %s' %(headers))

r = requests.put(url, headers=headers, verify=False)
apiutils.chkstatus(r.status_code,r.content)

answer=r.json()
ipaddress=answer[u'objectAddr']
print('Registering %s using next free IP in the subnet: %s' %(hostname,ipaddress))
logger.info('Registering %s using next free IP in the subnet: %s' %(hostname,ipaddress))

# Add the IPaddr and hostname to the subnet. DNS domain comes from the config file
url = apiurl + '/v4address/'
headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authentication': 'Token %s' %token}
data = '{"domainName": "' + domain + '","objectAddr": "' + ipaddress + '","objectClass": "Server","objectName": "' + hostname + '","subnetAddr": "' + subnet + '"}'

logger.info('URL : %s' %(url))
logger.info('Headers : %s' %(headers))
logger.info('Data : %s' %(data))

r = requests.put(url, headers=headers, verify=False, data=data)
# If the addition of the IP failed then release the IP that was seletectd
try:
    apiutils.chkstatus(r.status_code,r.content)
except:
    print('Cleanup - Releasing selected IP Address : %s' %(ipaddress))
    logger.info('Cleanup - Releasing selected IP Address : %s' %(ipaddress))
    # Delete the IPaddr from VitalQIP
    url = apiurl + '/v4address/' + ipaddress + '/'
    r = requests.delete(url, headers=headers, verify=False)
    sys.exit(1)

